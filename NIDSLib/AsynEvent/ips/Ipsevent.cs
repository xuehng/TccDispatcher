// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.renstech.SuperIPS.ipsevent {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Ipsevent {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.LocationMessage, global::com.renstech.SuperIPS.ipsevent.LocationMessage.Builder> internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.CameraStateMessage, global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Builder> internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.IPSEventMessage, global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Builder> internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Ipsevent() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5pcHNldmVudC5wcm90bxIeY29tLnJlbnN0ZWNoLlN1cGVySVBTLmlwc2V2" + 
          "ZW50IkgKD0xvY2F0aW9uTWVzc2FnZRIQCghkZXZpY2VJZBgBIAIoBBINCgVt" + 
          "YXBJZBgCIAIoDRIJCgF4GAMgAigFEgkKAXkYBCACKAUi1gEKEkNhbWVyYVN0" + 
          "YXRlTWVzc2FnZRIQCghkZXZpY2VJZBgBIAIoBBISCgppc0NhbWVyYU9uGAIg" + 
          "AigIElEKCmNhbWVyYVR5cGUYAyABKA4yPS5jb20ucmVuc3RlY2guU3VwZXJJ" + 
          "UFMuaXBzZXZlbnQuQ2FtZXJhU3RhdGVNZXNzYWdlLkNhbWVyYVR5cGUSEQoJ" + 
          "ZmFjZUFuZ2xlGAQgASgNEhEKCXRpbHRBbmdsZRgFIAEoDSIhCgpDYW1lcmFU" + 
          "eXBlEgkKBUZyb250EAESCAoEQmFjaxACIqECCg9JUFNFdmVudE1lc3NhZ2US" + 
          "SQoLbWVzc2FnZVR5cGUYASACKA4yNC5jb20ucmVuc3RlY2guU3VwZXJJUFMu" + 
          "aXBzZXZlbnQuSVBTRXZlbnRNZXNzYWdlLlR5cGUSRAoLbG9jYXRpb25Nc2cY" + 
          "AiABKAsyLy5jb20ucmVuc3RlY2guU3VwZXJJUFMuaXBzZXZlbnQuTG9jYXRp" + 
          "b25NZXNzYWdlEkoKDmNhbWVyYVN0YXRlTXNnGAMgASgLMjIuY29tLnJlbnN0" + 
          "ZWNoLlN1cGVySVBTLmlwc2V2ZW50LkNhbWVyYVN0YXRlTWVzc2FnZSIxCgRU" + 
          "eXBlEhUKEUxvY2F0aW9uVXBkYXRlTXNnEAESEgoOQ2FtZXJhU3RhdGVNc2cQ" + 
          "Ag==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.LocationMessage, global::com.renstech.SuperIPS.ipsevent.LocationMessage.Builder>(internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__Descriptor,
                new string[] { "DeviceId", "MapId", "X", "Y", });
        internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.CameraStateMessage, global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Builder>(internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__Descriptor,
                new string[] { "DeviceId", "IsCameraOn", "CameraType", "FaceAngle", "TiltAngle", });
        internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.renstech.SuperIPS.ipsevent.IPSEventMessage, global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Builder>(internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__Descriptor,
                new string[] { "MessageType", "LocationMsg", "CameraStateMsg", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LocationMessage : pb::GeneratedMessage<LocationMessage, LocationMessage.Builder> {
    private LocationMessage() { }
    private static readonly LocationMessage defaultInstance = new LocationMessage().MakeReadOnly();
    private static readonly string[] _locationMessageFieldNames = new string[] { "deviceId", "mapId", "x", "y" };
    private static readonly uint[] _locationMessageFieldTags = new uint[] { 8, 16, 24, 32 };
    public static LocationMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LocationMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LocationMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LocationMessage, LocationMessage.Builder> InternalFieldAccessors {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_LocationMessage__FieldAccessorTable; }
    }
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private ulong deviceId_;
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong DeviceId {
      get { return deviceId_; }
    }
    
    public const int MapIdFieldNumber = 2;
    private bool hasMapId;
    private uint mapId_;
    public bool HasMapId {
      get { return hasMapId; }
    }
    [global::System.CLSCompliant(false)]
    public uint MapId {
      get { return mapId_; }
    }
    
    public const int XFieldNumber = 3;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 4;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceId) return false;
        if (!hasMapId) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _locationMessageFieldNames;
      if (hasDeviceId) {
        output.WriteUInt64(1, field_names[0], DeviceId);
      }
      if (hasMapId) {
        output.WriteUInt32(2, field_names[1], MapId);
      }
      if (hasX) {
        output.WriteInt32(3, field_names[2], X);
      }
      if (hasY) {
        output.WriteInt32(4, field_names[3], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, DeviceId);
        }
        if (hasMapId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, MapId);
        }
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LocationMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LocationMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocationMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LocationMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LocationMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LocationMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LocationMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LocationMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LocationMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LocationMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LocationMessage result;
      
      private LocationMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          LocationMessage original = result;
          result = new LocationMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LocationMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.renstech.SuperIPS.ipsevent.LocationMessage.Descriptor; }
      }
      
      public override LocationMessage DefaultInstanceForType {
        get { return global::com.renstech.SuperIPS.ipsevent.LocationMessage.DefaultInstance; }
      }
      
      public override LocationMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LocationMessage) {
          return MergeFrom((LocationMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LocationMessage other) {
        if (other == global::com.renstech.SuperIPS.ipsevent.LocationMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasMapId) {
          MapId = other.MapId;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_locationMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _locationMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeviceId = input.ReadUInt64(ref result.deviceId_);
              break;
            }
            case 16: {
              result.hasMapId = input.ReadUInt32(ref result.mapId_);
              break;
            }
            case 24: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 32: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDeviceId(ulong value) {
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = 0UL;
        return this;
      }
      
      public bool HasMapId {
        get { return result.hasMapId; }
      }
      [global::System.CLSCompliant(false)]
      public uint MapId {
        get { return result.MapId; }
        set { SetMapId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMapId(uint value) {
        PrepareBuilder();
        result.hasMapId = true;
        result.mapId_ = value;
        return this;
      }
      public Builder ClearMapId() {
        PrepareBuilder();
        result.hasMapId = false;
        result.mapId_ = 0;
        return this;
      }
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    static LocationMessage() {
      object.ReferenceEquals(global::com.renstech.SuperIPS.ipsevent.Ipsevent.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CameraStateMessage : pb::GeneratedMessage<CameraStateMessage, CameraStateMessage.Builder> {
    private CameraStateMessage() { }
    private static readonly CameraStateMessage defaultInstance = new CameraStateMessage().MakeReadOnly();
    private static readonly string[] _cameraStateMessageFieldNames = new string[] { "cameraType", "deviceId", "faceAngle", "isCameraOn", "tiltAngle" };
    private static readonly uint[] _cameraStateMessageFieldTags = new uint[] { 24, 8, 32, 16, 40 };
    public static CameraStateMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CameraStateMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CameraStateMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CameraStateMessage, CameraStateMessage.Builder> InternalFieldAccessors {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_CameraStateMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum CameraType {
        Front = 1,
        Back = 2,
      }
      
    }
    #endregion
    
    public const int DeviceIdFieldNumber = 1;
    private bool hasDeviceId;
    private ulong deviceId_;
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong DeviceId {
      get { return deviceId_; }
    }
    
    public const int IsCameraOnFieldNumber = 2;
    private bool hasIsCameraOn;
    private bool isCameraOn_;
    public bool HasIsCameraOn {
      get { return hasIsCameraOn; }
    }
    public bool IsCameraOn {
      get { return isCameraOn_; }
    }
    
    public const int CameraTypeFieldNumber = 3;
    private bool hasCameraType;
    private global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType cameraType_ = global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType.Front;
    public bool HasCameraType {
      get { return hasCameraType; }
    }
    public global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType CameraType {
      get { return cameraType_; }
    }
    
    public const int FaceAngleFieldNumber = 4;
    private bool hasFaceAngle;
    private uint faceAngle_;
    public bool HasFaceAngle {
      get { return hasFaceAngle; }
    }
    [global::System.CLSCompliant(false)]
    public uint FaceAngle {
      get { return faceAngle_; }
    }
    
    public const int TiltAngleFieldNumber = 5;
    private bool hasTiltAngle;
    private uint tiltAngle_;
    public bool HasTiltAngle {
      get { return hasTiltAngle; }
    }
    [global::System.CLSCompliant(false)]
    public uint TiltAngle {
      get { return tiltAngle_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceId) return false;
        if (!hasIsCameraOn) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cameraStateMessageFieldNames;
      if (hasDeviceId) {
        output.WriteUInt64(1, field_names[1], DeviceId);
      }
      if (hasIsCameraOn) {
        output.WriteBool(2, field_names[3], IsCameraOn);
      }
      if (hasCameraType) {
        output.WriteEnum(3, field_names[0], (int) CameraType, CameraType);
      }
      if (hasFaceAngle) {
        output.WriteUInt32(4, field_names[2], FaceAngle);
      }
      if (hasTiltAngle) {
        output.WriteUInt32(5, field_names[4], TiltAngle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, DeviceId);
        }
        if (hasIsCameraOn) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsCameraOn);
        }
        if (hasCameraType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) CameraType);
        }
        if (hasFaceAngle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, FaceAngle);
        }
        if (hasTiltAngle) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, TiltAngle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CameraStateMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CameraStateMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CameraStateMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CameraStateMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CameraStateMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CameraStateMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CameraStateMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CameraStateMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CameraStateMessage result;
      
      private CameraStateMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          CameraStateMessage original = result;
          result = new CameraStateMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CameraStateMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Descriptor; }
      }
      
      public override CameraStateMessage DefaultInstanceForType {
        get { return global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.DefaultInstance; }
      }
      
      public override CameraStateMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CameraStateMessage) {
          return MergeFrom((CameraStateMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CameraStateMessage other) {
        if (other == global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasIsCameraOn) {
          IsCameraOn = other.IsCameraOn;
        }
        if (other.HasCameraType) {
          CameraType = other.CameraType;
        }
        if (other.HasFaceAngle) {
          FaceAngle = other.FaceAngle;
        }
        if (other.HasTiltAngle) {
          TiltAngle = other.TiltAngle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cameraStateMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cameraStateMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeviceId = input.ReadUInt64(ref result.deviceId_);
              break;
            }
            case 16: {
              result.hasIsCameraOn = input.ReadBool(ref result.isCameraOn_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.cameraType_, out unknown)) {
                result.hasCameraType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasFaceAngle = input.ReadUInt32(ref result.faceAngle_);
              break;
            }
            case 40: {
              result.hasTiltAngle = input.ReadUInt32(ref result.tiltAngle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDeviceId(ulong value) {
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = 0UL;
        return this;
      }
      
      public bool HasIsCameraOn {
        get { return result.hasIsCameraOn; }
      }
      public bool IsCameraOn {
        get { return result.IsCameraOn; }
        set { SetIsCameraOn(value); }
      }
      public Builder SetIsCameraOn(bool value) {
        PrepareBuilder();
        result.hasIsCameraOn = true;
        result.isCameraOn_ = value;
        return this;
      }
      public Builder ClearIsCameraOn() {
        PrepareBuilder();
        result.hasIsCameraOn = false;
        result.isCameraOn_ = false;
        return this;
      }
      
      public bool HasCameraType {
       get { return result.hasCameraType; }
      }
      public global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType CameraType {
        get { return result.CameraType; }
        set { SetCameraType(value); }
      }
      public Builder SetCameraType(global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType value) {
        PrepareBuilder();
        result.hasCameraType = true;
        result.cameraType_ = value;
        return this;
      }
      public Builder ClearCameraType() {
        PrepareBuilder();
        result.hasCameraType = false;
        result.cameraType_ = global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Types.CameraType.Front;
        return this;
      }
      
      public bool HasFaceAngle {
        get { return result.hasFaceAngle; }
      }
      [global::System.CLSCompliant(false)]
      public uint FaceAngle {
        get { return result.FaceAngle; }
        set { SetFaceAngle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFaceAngle(uint value) {
        PrepareBuilder();
        result.hasFaceAngle = true;
        result.faceAngle_ = value;
        return this;
      }
      public Builder ClearFaceAngle() {
        PrepareBuilder();
        result.hasFaceAngle = false;
        result.faceAngle_ = 0;
        return this;
      }
      
      public bool HasTiltAngle {
        get { return result.hasTiltAngle; }
      }
      [global::System.CLSCompliant(false)]
      public uint TiltAngle {
        get { return result.TiltAngle; }
        set { SetTiltAngle(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTiltAngle(uint value) {
        PrepareBuilder();
        result.hasTiltAngle = true;
        result.tiltAngle_ = value;
        return this;
      }
      public Builder ClearTiltAngle() {
        PrepareBuilder();
        result.hasTiltAngle = false;
        result.tiltAngle_ = 0;
        return this;
      }
    }
    static CameraStateMessage() {
      object.ReferenceEquals(global::com.renstech.SuperIPS.ipsevent.Ipsevent.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class IPSEventMessage : pb::GeneratedMessage<IPSEventMessage, IPSEventMessage.Builder> {
    private IPSEventMessage() { }
    private static readonly IPSEventMessage defaultInstance = new IPSEventMessage().MakeReadOnly();
    private static readonly string[] _iPSEventMessageFieldNames = new string[] { "cameraStateMsg", "locationMsg", "messageType" };
    private static readonly uint[] _iPSEventMessageFieldTags = new uint[] { 26, 18, 8 };
    public static IPSEventMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPSEventMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPSEventMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPSEventMessage, IPSEventMessage.Builder> InternalFieldAccessors {
      get { return global::com.renstech.SuperIPS.ipsevent.Ipsevent.internal__static_com_renstech_SuperIPS_ipsevent_IPSEventMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        LocationUpdateMsg = 1,
        CameraStateMsg = 2,
      }
      
    }
    #endregion
    
    public const int MessageTypeFieldNumber = 1;
    private bool hasMessageType;
    private global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type messageType_ = global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type.LocationUpdateMsg;
    public bool HasMessageType {
      get { return hasMessageType; }
    }
    public global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type MessageType {
      get { return messageType_; }
    }
    
    public const int LocationMsgFieldNumber = 2;
    private bool hasLocationMsg;
    private global::com.renstech.SuperIPS.ipsevent.LocationMessage locationMsg_;
    public bool HasLocationMsg {
      get { return hasLocationMsg; }
    }
    public global::com.renstech.SuperIPS.ipsevent.LocationMessage LocationMsg {
      get { return locationMsg_ ?? global::com.renstech.SuperIPS.ipsevent.LocationMessage.DefaultInstance; }
    }
    
    public const int CameraStateMsgFieldNumber = 3;
    private bool hasCameraStateMsg;
    private global::com.renstech.SuperIPS.ipsevent.CameraStateMessage cameraStateMsg_;
    public bool HasCameraStateMsg {
      get { return hasCameraStateMsg; }
    }
    public global::com.renstech.SuperIPS.ipsevent.CameraStateMessage CameraStateMsg {
      get { return cameraStateMsg_ ?? global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageType) return false;
        if (HasLocationMsg) {
          if (!LocationMsg.IsInitialized) return false;
        }
        if (HasCameraStateMsg) {
          if (!CameraStateMsg.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _iPSEventMessageFieldNames;
      if (hasMessageType) {
        output.WriteEnum(1, field_names[2], (int) MessageType, MessageType);
      }
      if (hasLocationMsg) {
        output.WriteMessage(2, field_names[1], LocationMsg);
      }
      if (hasCameraStateMsg) {
        output.WriteMessage(3, field_names[0], CameraStateMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MessageType);
        }
        if (hasLocationMsg) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, LocationMsg);
        }
        if (hasCameraStateMsg) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CameraStateMsg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static IPSEventMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPSEventMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPSEventMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSEventMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPSEventMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPSEventMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<IPSEventMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPSEventMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPSEventMessage result;
      
      private IPSEventMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          IPSEventMessage original = result;
          result = new IPSEventMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPSEventMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Descriptor; }
      }
      
      public override IPSEventMessage DefaultInstanceForType {
        get { return global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.DefaultInstance; }
      }
      
      public override IPSEventMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPSEventMessage) {
          return MergeFrom((IPSEventMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPSEventMessage other) {
        if (other == global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageType) {
          MessageType = other.MessageType;
        }
        if (other.HasLocationMsg) {
          MergeLocationMsg(other.LocationMsg);
        }
        if (other.HasCameraStateMsg) {
          MergeCameraStateMsg(other.CameraStateMsg);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPSEventMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPSEventMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.messageType_, out unknown)) {
                result.hasMessageType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::com.renstech.SuperIPS.ipsevent.LocationMessage.Builder subBuilder = global::com.renstech.SuperIPS.ipsevent.LocationMessage.CreateBuilder();
              if (result.hasLocationMsg) {
                subBuilder.MergeFrom(LocationMsg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LocationMsg = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Builder subBuilder = global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.CreateBuilder();
              if (result.hasCameraStateMsg) {
                subBuilder.MergeFrom(CameraStateMsg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraStateMsg = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageType {
       get { return result.hasMessageType; }
      }
      public global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type MessageType {
        get { return result.MessageType; }
        set { SetMessageType(value); }
      }
      public Builder SetMessageType(global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type value) {
        PrepareBuilder();
        result.hasMessageType = true;
        result.messageType_ = value;
        return this;
      }
      public Builder ClearMessageType() {
        PrepareBuilder();
        result.hasMessageType = false;
        result.messageType_ = global::com.renstech.SuperIPS.ipsevent.IPSEventMessage.Types.Type.LocationUpdateMsg;
        return this;
      }
      
      public bool HasLocationMsg {
       get { return result.hasLocationMsg; }
      }
      public global::com.renstech.SuperIPS.ipsevent.LocationMessage LocationMsg {
        get { return result.LocationMsg; }
        set { SetLocationMsg(value); }
      }
      public Builder SetLocationMsg(global::com.renstech.SuperIPS.ipsevent.LocationMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocationMsg = true;
        result.locationMsg_ = value;
        return this;
      }
      public Builder SetLocationMsg(global::com.renstech.SuperIPS.ipsevent.LocationMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLocationMsg = true;
        result.locationMsg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLocationMsg(global::com.renstech.SuperIPS.ipsevent.LocationMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLocationMsg &&
            result.locationMsg_ != global::com.renstech.SuperIPS.ipsevent.LocationMessage.DefaultInstance) {
            result.locationMsg_ = global::com.renstech.SuperIPS.ipsevent.LocationMessage.CreateBuilder(result.locationMsg_).MergeFrom(value).BuildPartial();
        } else {
          result.locationMsg_ = value;
        }
        result.hasLocationMsg = true;
        return this;
      }
      public Builder ClearLocationMsg() {
        PrepareBuilder();
        result.hasLocationMsg = false;
        result.locationMsg_ = null;
        return this;
      }
      
      public bool HasCameraStateMsg {
       get { return result.hasCameraStateMsg; }
      }
      public global::com.renstech.SuperIPS.ipsevent.CameraStateMessage CameraStateMsg {
        get { return result.CameraStateMsg; }
        set { SetCameraStateMsg(value); }
      }
      public Builder SetCameraStateMsg(global::com.renstech.SuperIPS.ipsevent.CameraStateMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraStateMsg = true;
        result.cameraStateMsg_ = value;
        return this;
      }
      public Builder SetCameraStateMsg(global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraStateMsg = true;
        result.cameraStateMsg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraStateMsg(global::com.renstech.SuperIPS.ipsevent.CameraStateMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraStateMsg &&
            result.cameraStateMsg_ != global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.DefaultInstance) {
            result.cameraStateMsg_ = global::com.renstech.SuperIPS.ipsevent.CameraStateMessage.CreateBuilder(result.cameraStateMsg_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraStateMsg_ = value;
        }
        result.hasCameraStateMsg = true;
        return this;
      }
      public Builder ClearCameraStateMsg() {
        PrepareBuilder();
        result.hasCameraStateMsg = false;
        result.cameraStateMsg_ = null;
        return this;
      }
    }
    static IPSEventMessage() {
      object.ReferenceEquals(global::com.renstech.SuperIPS.ipsevent.Ipsevent.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
